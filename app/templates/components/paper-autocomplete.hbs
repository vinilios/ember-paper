{{#paper-autocomplete-dropdown
  horizontalPosition=(readonly horizontalPosition)
  initiallyOpened=(readonly initiallyOpened)
  matchTriggerWidth=(readonly matchTriggerWidth)
  onClose=(action "onClose")
  onOpen=(action "onOpen")
  registerAPI=(action "registerAPI")
  renderInPlace=(readonly renderInPlace)
  verticalPosition=(readonly verticalPosition)
  disabled=(readonly disabled)
  contentComponent=(readonly contentComponent)
  as |dropdown|}}

  {{#dropdown.trigger
    ariaDescribedBy=(readonly ariaDescribedBy)
    ariaInvalid=(readonly ariaInvalid)
    ariaLabel=(readonly ariaLabel)
    ariaLabelledBy=(readonly ariaLabelledBy)
    ariaRequired=(readonly required)
    class=(readonly concatenatedTriggerClasses)
    onKeydown=(action "onTriggerKeydown")
    onFocus=(action "onTriggerFocus")
    onBlur=(action "deactivate")
    tabindex=(readonly tabindex)
    disabledProxy=disabled
    label=label}}
    {{#component triggerComponent
      allowClear=(readonly allowClear)
      required=(readonly required)
      passThru=(readonly passThru)
      class="layout-row"
      flex=(readonly flex)
      disabled=disabled
      buildSelection=(readonly buildSelection)
      extra=(readonly extra)
      listboxId=(readonly optionsId)
      onFocus=(action "onFocus")
      activate=(action "activate")
      errors=errors
      isTouched=isTouched
      onBlur=(action "onBlur")
      onInput=(action "onInput")
      placeholder=(readonly placeholder)
      onKeydown=(action "onKeydown")
      searchEnabled=(readonly searchEnabled)
      searchField=(readonly searchField)
      searchText=(readonly searchText)
      validationErrorMessages=(readonly validationErrorMessages)
      select=(readonly publicAPI)
      selected=(readonly selected)
      selectedItemComponent=(readonly selectedItemComponent)
      as |opt term|}}
      {{yield opt term}}
    {{/component}}
  {{/dropdown.trigger}}

  {{#dropdown.content
    class=(readonly concatenatedDropdownClasses)
    select=(readonly publicAPI)
    to=(readonly destination) as |virtualItems|}}
    {{#if mustShowSearchMessage}}
      {{component searchMessageComponent
        searchMessage=(readonly searchMessage)
        select=(readonly publicAPI)
      }}
    {{else if mustShowNoMessages}}
      {{#if (hasBlock "inverse")}}
        {{yield to="inverse"}}
      {{else if noMatchesMessage}}
        <ul class="ember-power-select-options md-autocomplete-suggestions" role="listbox">
          <li class="ember-power-select-option ember-power-select-option--no-matches-message" role="option" {{action 'onCreate' publicAPI.searchText}}>
            {{noMatchesMessage}}
          </li>
        </ul>
      {{/if}}
    {{else}}
      {{#component optionsComponent
        class="ember-power-select-options md-autocomplete-suggestions"
        groupIndex=""
        loadingMessage=(readonly loadingMessage)
        id=(readonly optionsId)
        options=(readonly virtualItems)
        optionsComponent=(readonly optionsComponent)
        select=(readonly publicAPI)
        as |option term|}}
          {{yield option term}}
      {{/component}}
    {{/if}}
  {{/dropdown.content}}

{{/paper-autocomplete-dropdown}}
